go.property("damage_player", 30)
--go.property("shot_player", 60)
local right = true
local speed = 150

local shield = 0

local platypus = require "platypus.platypus"

local max_health = 100
local player_health = 100
local player_mana = 50

local player_health_shield = nil

local GROUP_enemy = hash("enemy")
local enemy_CONTACT = false

local GROUP_spikes = hash("spikes")


local add_player_health = hash("add_player_health")
local add_player_money = hash("add_player_money")
local add_player_mana = hash("add_player_mana")

local msg_id = nil

local contact_point_response = hash("contact_point_response")

local attack_shield = false

local input_attack = hash("attack")
local input_shot = hash("shot1")
local input_interactive = hash("interactive")

local msg_simple_attack = hash("simple_attack")

local GROUP_chests = hash("chests")

local button_contact = false
local open_door = false

local bonfire_contact = false

local id_outfit1 = 0
local id_outfit3 = 0

--первый навык
local damage_scill1 = 1.5
local cooldown_scill1 = 6

--третий навык
local scill3 = false
local meter = 120
local splash = false
local cooldown_scill3 = 5

function init(self)
	msg.post(".", "acquire_input_focus")

	print("ЗАГРУЖЕНО")

	self.input_state = {}
	self.platypus = platypus.create({
		collisions = {
			separation = platypus.SEPARATION_RAYS,
			groups = {
				[hash("platform")] = platypus.DIR_ALL,
				[hash("obstacle_for_enemy")] = platypus.DIR_ALL,

			},
			left = 9, right = 9, top = 14, bottom = 16, offset = vmath.vector3(0, -3, 0)
		},
		debug = false,
		gravity = -500,
		allow_double_jump = true,

		allow_wall_jump = true,
		allow_wall_slide = true,
		wall_slide_gravity = -50,
	})

	self.actions = {}
	


	self.cooldown = true
	self.cooldown_activate_attack = true
	self.cooldown_scill2 = true

	self.damage_enemy = nil

	--сообщения в меню 
	msg.post("main:/menu#menu", "message_menu", {score = go.get("platform#game", "score"), money = go.get("platform#game", "money"), max_health = max_health, damage = self.damage_player, speed = speed, shield = shield})
		
end

local function anim_attack_done(self, message_id, message, sender)
	
end

local function play_animation(self, animation, func)
	if self.current_animation ~= animation then
		self.current_animation = animation
		sprite.play_flipbook("#sprite", animation, func)
	end
end


--ф-ии для карабканья вверх/вниз
local function climb_up(self)
	--self.climbing = true
	self.platypus.gravity = 0
	self.platypus.velocity.y = 0
	self.platypus.up(speed/2)
end

local function climb_down(self)
	--self.climbing = true
	self.platypus.gravity = 0
	self.platypus.velocity.y = 0
	self.platypus.down(speed/2)
end

--атака на врага
local function decrease_enemy_health(self, msg_id, damage)
	print("damsmd = ", damage)
	msg.post(msg_id, "simple_attack", {damage_player = damage})
end

--функция для КД
local function cooldown(self)
	self.cooldown = false

	go.animate("#sprite", "tint", go.PLAYBACK_LOOP_FORWARD, vmath.vector4(1,0,0,1), go.EASING_LINEAR, 0.3, 0, function()
		go.animate("#sprite", "tint", go.PLAYBACK_LOOP_FORWARD, vmath.vector4(1,1,1,1), go.EASING_LINEAR, 0.3)
	end)
	
	timer.delay(2, false, function()
		self.cooldown = true
		go.cancel_animations("#sprite", "tint")
		go.set("#sprite", "tint", vmath.vector4(1, 1, 1, 1))
		
	end)
end

--функция для первого актииируемого навыка
local function cooldown_activate_attack(self)
	self.cooldown_activate_attack = false
	timer.delay(cooldown_scill1, false, function()
		self.cooldown_activate_attack = true
	end)
end

--для второго акт навыка
function cooldown_scill2(self, value)
	self.cooldown_scill2 = false
	timer.delay(go.get("weapon#weapon", "cooldown"), false, function()
		self.cooldown_scill2 = true
	end)
end

--уменьшение здоровья игрока
local function decrease_player_health(self, damage)
	--сделать потом чтоб останавливаться
	--self.damage_enemy = go.get(msg_id, "damage_enemy")
	player_health = player_health - (damage - shield)
	cooldown(self)
	--game over lol
end

function update(self, dt)
	self.platypus.update(dt)

	if player_health <= 0 then
		player_health = 0

		msg.post("main:/pause#pause", "death_player1", {player1 = true})
		play_animation(self, hash("death"), nil)
		speed = 0	
	else
		--стоит ли игрок на земле
		local ground_contact = self.platypus.has_ground_contact()

		if self.actions[hash("left")] then
			self.platypus.left(speed)
			right = false
			play_animation(self, hash("run"), nil)
			sprite.set_hflip("#sprite", true)

		elseif self.actions[hash("right")] then
			self.platypus.right(speed)
			right = true
			play_animation(self, hash("run"), nil)
			sprite.set_hflip("#sprite", false)
		end

		if self.actions[hash("jump")] then
			self.platypus.jump(speed*2.5)
		elseif not self.actions[hash("jump")] then
			self.platypus.abort_jump(0.5)
		end

		if self.actions[hash("up")] and self.ladder then
			climb_up(self)
		elseif self.actions[hash("down")] and self.ladder and not ground_contact then
			climb_down(self)
		end

		--открытие меню
		if self.actions[input_interactive] and bonfire_contact then
			--сообщ для открытия меню
			msg.post("main:/menu#menu", "open_menu")
		end

		--атака
		if self.actions[input_attack] and not attack_shield then
			play_animation(self, hash("attack"), function()
				print("conttact = ", enemy_CONTACT)
				if enemy_CONTACT then
					decrease_enemy_health(self, msg_id, self.damage_player)
				end
			end)
		end

		--защита
		if self.actions[hash("shield")] then
			attack_shield = true
		else
			attack_shield = false
		end

		--открытие сундука, ...
		if self.actions[input_interactive] then
			msg.post("chests#chests", "open_chests")
		end
		
		--открытие двери
		if self.actions[input_interactive] and button_contact and not open_door then
			print("открытие двери...")
			open_door = true
		end
		
		msg.post("bar#lifebar", "set_health", {health = player_health, max_health = max_health, player1 = true})
	end
end

function on_message(self, message_id, message, sender)
	self.platypus.on_message(message_id, message) 

	--сложность
	if message_id == hash("diff_attack") then
		self.damage_player = self.damage_player/message.attack_diff
		--сделать норм мб отдельный скрипт
		--self.shot_player = self.shot_player/message.attack_diff
	end

	if message_id == hash("trigger_response") then
		--контакт с костром
		if message.group == hash("bonfire") then
			if message.enter then
				bonfire_contact = true
			else
				bonfire_contact = false
			end
		end	

		--контакт с лестницей
		if message.other_group == hash("ladder") then
			if message.enter then
				self.ladder = true
			else
				self.platypus.gravity = -500
				self.ladder = false
				--self.climbing = false
			end
		end

		--контакт с врагом
		if message.other_group == GROUP_enemy then
			if message.enter then
				enemy_CONTACT = true
				--
				msg_id = message.other_id

				--для 3 навыка
				if scill3 and splash and attack_shield then
					decrease_enemy_health(self, msg_id, 20)
					print("третий скил удар")
				end
			else
				enemy_CONTACT = false
			end


		end

		--контакт с шипами
		if message.group == GROUP_spikes and self.cooldown then
			
			player_health = player_health - 5
			cooldown(self)
			--дублирую пока чтоб работало
			msg.post("bar#lifebar", "set_health", {health = player_health, max_health = max_health, player1 = true})
				
		end

		--контакт с кнопкой для открытия двери
		if message.group == hash("button") then
			if message.enter then
				button_contact = true
			else
				button_contact = false
			end
		end

		--контакт с дверью
		if message.group == hash("door") then
			if open_door then
				print("дверь открыта")
				msg.post("main:/menu#menu", "open_level")
			else
				print("дверь закрыта")
			end
		end

		--контакт с вещами
		if message.group == hash("outfit1") then
			print("шлем взят")
			msg.post("main:/menu#menu", "add_outfit", {type = "outfit1"})
			go.delete(id_outfit1)

			--
			shield = shield + 5

		end

		if message.group == hash("outfit3") then
			print("сапоги взяты")
			msg.post("main:/menu#menu", "add_outfit", {type = "outfit3"})
			go.delete(id_outfit3)

			--увеличение скорости
			speed = speed + 50
		end
	end

	--атака от врага
	if message_id == msg_simple_attack and attack_shield == false and self.cooldown then
		decrease_player_health(self, message.damage)
	end

	--[[сообщение о смерти врага
	if message_id == hash("enemy_death") then
		--score = label.get_text("platform#score")
		go.set("platform#game", "score", go.get("platform#game", "score") + message.score)

		update_menu(self.damage_player)
	end]]--

	--обновление характеристик от меню
	if message_id == hash("menu_update_player") then
		print("menu update message")
		max_health = message.max_health
		self.damage_player = message.damage_player
		--go.set("#", "damage_player", message.damage_player)
		print(self.damage_player)
		speed = message.speed
		shield = message.shield
		player_health = max_health
		go.set("platform#game", "score", message.score)
		msg.post("main:/menu#menu", "message_menu", {score = go.get("platform#game", "score"), money = go.get("platform#game", "money"), max_health = max_health, damage = self.damage_player, speed = speed, shield = shield})
		
	end


	if player_health > 0 then
		--активируемый навык
		if message_id == hash("scill1") and player_mana >= 20 and self.cooldown_activate_attack and enemy_CONTACT then
			print("активируемый навык")
			cooldown_activate_attack(self)
			decrease_enemy_health(self, msg_id, self.damage_player*damage_scill1)
			--print("ataka = *", damage_scill1, " kd = ", cooldown_scill1)
			player_mana = player_mana - 20 
		end
		--второй активируемый навык: метание меча
		if message_id == hash("scill2") and player_mana >= 20 and self.cooldown_scill2 then
			local id = factory.create("weapon#factory_weapon")
			msg.post(id, "create_weapon", {right = right})
			cooldown_scill2(self, go.get("weapon#weapon", "cooldown"))
			player_mana = player_mana - 20 

		end
		--третий актив навык: рывок
		if message_id == hash("scill3") and scill3 == false and player_mana >= 20 then

			attack_shield = true
			scill3 = true

			local pos = go.get_position()

			go.animate(go.get_id(), "position.x", go.PLAYBACK_ONCE_FORWARD, pos.x + meter, go.EASING_LINEAR, 0.3, 0, function()
				attack_shield = false
			end)

			timer.delay(cooldown_scill3, false, function()
				scill3 = false
			end)

			player_mana = player_mana - 20 

		end
	end
	--обновление первого навыка
	if message_id == hash("update_level_scill1") then
		damage_scill1 = message.damage
		cooldown_scill1 = message.cooldown
	end

	--обновление третьего навыка
	if message_id == hash("update_level_scill3") then
		meter = message.meter
		cooldown_scill3 = message.cooldown
		splash = message.splash
	end

	--сообщ для получения лута
	if message_id == hash("loot_contact") then
		--контакт с лутом ом ом :)
		--контакт со "здоровьем"
		if message.collision == hash("collision_health") then
			player_health = player_health + 10

			--тоже уберу потом (дублирую пока)
			if player_health > 100 then
				player_health = 100
			end

			--дублирую пока чтоб работало
			msg.post("bar#lifebar", "set_health", {health = player_health, max_health = max_health, player1 = true})
		end

		--контакт с "деньгами"
		if message.collision == hash("collision_money") then
			print("plus money ")

			go.set("platform#game", "money", go.get("platform#game", "money") + 100)
			
			label.set_text("platform#money", go.get("platform#game", "money"))

			--сообщ в меню для денег
			--msg.post("main:/menu#menu", "money_menu", {money = money})

			--цupdate_menu(self.damage_player)
		end

		--контакт с "маной"
		if  message.collision == hash("collision_mana") then
			print("plus mana ")

			player_mana = player_mana + 10

			--тоже уберу потом (дублирую пока)
			if player_mana > 100 then
				player_mana = 100
			end

			--дублирую пока чтоб работало
			msg.post("bar#lifebar", "set_mana", {mana = player_mana, max_mana = 100, player1 = true})

		end
	end

	--получения экз вещей для удаления
	if message_id == hash("id_sender1") then
		id_outfit1 = message.id_outfit1
	end

	if message_id == hash("id_sender3") then
		id_outfit3 = message.id_outfit3
	end
end



function on_input(self, action_id, action)
	if action_id then
		if action.pressed then
			self.actions[action_id] = true
		elseif action.released then
			self.actions[action_id] = false
		end
	else
		play_animation(self, hash("idle"), nil)

	end
end