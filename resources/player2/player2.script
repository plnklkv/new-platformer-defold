go.property("damage_player", 30)
go.property("shot_player", 60)
local speed = 150
--local money = 1000
--local score = 0
local shield = 0

local platypus = require "platypus.platypus"

local max_health = 100
local player_health = 100
local player_mana = 50

--для выстрела
local right = true

--для отскока
local cooldown_rebound = true


local function play_animation(self, animation, func)
	if self.current_animation ~= animation then
		self.current_animation = animation
		sprite.play_flipbook("#sprite", animation, func)
	end
end

--функция для КД
local function cooldown(self)
	self.cooldown = false

	go.animate("#sprite", "tint", go.PLAYBACK_LOOP_FORWARD, vmath.vector4(1,0,0,1), go.EASING_LINEAR, 0.3, 0, function()
		go.animate("#sprite", "tint", go.PLAYBACK_LOOP_FORWARD, vmath.vector4(1,1,1,1), go.EASING_LINEAR, 0.3)
	end)

	timer.delay(2, false, function()
		self.cooldown = true
		go.cancel_animations("#sprite", "tint")
		go.set("#sprite", "tint", vmath.vector4(1, 1, 1, 1))

	end)
end

function init(self)
	msg.post(".", "acquire_input_focus")

	self.input_state = {}
	self.platypus = platypus.create({
		collisions = {
			separation = platypus.SEPARATION_RAYS,
			groups = {
				[hash("platform")] = platypus.DIR_ALL,
				[hash("obstacle_for_enemy")] = platypus.DIR_ALL,

			},
			left = 9, right = 9, top = 14, bottom = 14, offset = vmath.vector3(0, -3, 0)
		},
		debug = false,
		gravity = -500,
		allow_double_jump = true,

		allow_wall_jump = true,
		allow_wall_slide = true,
		wall_slide_gravity = -50,
	})

	self.actions = {}
	
	--текущая анимация
	self.current_animation = nil

	self.cooldown = true
	
end

--ф-ии для карабканья вверх/вниз
local function climb_up(self)
	--self.climbing = true
	self.platypus.gravity = 0
	self.platypus.velocity.y = 0
	self.platypus.up(speed/2)
end

local function climb_down(self)
	--self.climbing = true
	self.platypus.gravity = 0
	self.platypus.velocity.y = 0
	self.platypus.down(speed/2)
end

--уменьшение здоровья игрока
local function decrease_player_health(self)
	--сделать потом чтоб останавливаться
	--self.damage_enemy = go.get(msg_id, "damage_enemy")
	player_health = player_health - (50 - shield)
	cooldown(self)
	--game over lol
end

function update(self, dt)
	self.platypus.update(dt)

	if player_health <= 0 then
		player_health = 0

		msg.post("main:/pause#pause", "death_player2", {player2 = true})
		play_animation(self, hash("death"), nil)
		
	else
		--стоит ли игрок на земле
		local ground_contact = self.platypus.has_ground_contact()
		
		if self.actions[hash("left2")] then
			self.platypus.left(speed)
			right = false
			--sprite.play_flipbook("#sprite", hash("run"))
		
			play_animation(self, hash("run"), nil)
			sprite.set_hflip("#sprite", true)

		elseif self.actions[hash("right2")] then
			self.platypus.right(speed)
			right = true
			play_animation(self, hash("run"), nil)
			sprite.set_hflip("#sprite", false)

		--else
			--play_animation(self, hash("anim"))
		end

		if self.actions[hash("jump2")] then
			self.platypus.jump(speed*2.5)
		elseif not self.actions[hash("jump2")] then
			self.platypus.abort_jump(0.5)
					
		end
		
		if self.actions[hash("up2")] and self.ladder then
			climb_up(self)
		elseif self.actions[hash("down2")] and self.ladder and not ground_contact then
			climb_down(self)
		end

		--отскок в сторону
		if self.actions[hash("rebound")]and cooldown_rebound then
			cooldown_rebound = false
			local pos = go.get_position()
			if right then
				go.animate(go.get_id(), "position.x", go.PLAYBACK_ONCE_FORWARD, pos.x - 60, go.EASING_LINEAR, 0.2, 0)
			else
				go.animate(go.get_id(), "position.x", go.PLAYBACK_ONCE_FORWARD, pos.x + 60, go.EASING_LINEAR, 0.2, 0)
			end
			
			timer.delay(2, false, function()
				cooldown_rebound = true
			end)
		end

		msg.post("bar2#lifebar", "set_health", {health = player_health, max_health = max_health, player1 = false})
	end
end

function on_message(self, message_id, message, sender)
	self.platypus.on_message(message_id, message)

	if message_id == hash("trigger_response") then

		--контакт с лестницей
		if message.other_group == hash("ladder") then
			if message.enter then
				self.ladder = true
			else
				self.platypus.gravity = -500
				self.ladder = false
			end
		end

		--контакт с шипами
		if message.group == hash("spikes") and self.cooldown then

			print("spik")
			player_health = player_health - 5
			cooldown(self)
			--дублирую пока чтоб работало
			msg.post("bar2#lifebar", "set_health", {health = player_health, max_health = max_health, player1 = false})

		end
	end
	--атака от врага
	if message_id == hash("simple_attack") and self.cooldown then
		print("attackakka")
		decrease_player_health(self)
	end
end

function on_input(self, action_id, action)
	if action_id then
		if action.pressed then
			self.actions[action_id] = true
		elseif action.released then
			self.actions[action_id] = false
		end
	else
		play_animation(self, hash("anim"), nil)
		
	end

	if action_id == hash("shot") and action.released then
		play_animation(self, hash("attack"), function()
			local id = factory.create("shot#shot")
			msg.post(id, "shot_in_enemy", {right = right})
		end)
	end
end
