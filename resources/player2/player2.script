go.property("damage_player", 30)
go.property("shot_player", 60)
local speed = 150
--local money = 1000
--local score = 0
local shield = 0

local platypus = require "platypus.platypus"

local max_health = 100
local player_health = 100
local player_mana = 50

--для выстрела
local right = true

--для отскока
local cooldown_rebound = true


local function play_animation(self, animation, func)
	if self.current_animation ~= animation then
		self.current_animation = animation
		sprite.play_flipbook("#sprite", animation, func)
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")

	self.input_state = {}
	self.platypus = platypus.create({
		collisions = {
			separation = platypus.SEPARATION_RAYS,
			groups = {
				[hash("platform")] = platypus.DIR_ALL,
				[hash("obstacle_for_enemy")] = platypus.DIR_ALL,

			},
			left = 9, right = 9, top = 14, bottom = 14, offset = vmath.vector3(0, -3, 0)
		},
		debug = false,
		gravity = -500,
		allow_double_jump = true,

		allow_wall_jump = true,
		allow_wall_slide = true,
		wall_slide_gravity = -50,
	})

	self.actions = {}
	
	--текущая анимация
	self.current_animation = nil

	
end

--ф-ии для карабканья вверх/вниз
local function climb_up(self)
	--self.climbing = true
	self.platypus.gravity = 0
	self.platypus.velocity.y = 0
	self.platypus.up(speed/2)
end

local function climb_down(self)
	--self.climbing = true
	self.platypus.gravity = 0
	self.platypus.velocity.y = 0
	self.platypus.down(speed/2)
end

function update(self, dt)
	self.platypus.update(dt)

	--стоит ли игрок на земле
	local ground_contact = self.platypus.has_ground_contact()
	
	if self.actions[hash("left2")] then
		self.platypus.left(speed)
		right = false
		--sprite.play_flipbook("#sprite", hash("run"))
		play_animation(self, hash("run"), nil)
		sprite.set_hflip("#sprite", true)

	elseif self.actions[hash("right2")] then
		self.platypus.right(speed)
		right = true
		play_animation(self, hash("run"), nil)
		sprite.set_hflip("#sprite", false)

	--else
		--play_animation(self, hash("anim"))
	end

	if self.actions[hash("jump2")] then
			self.platypus.jump(speed*2.5)
	elseif not self.actions[hash("jump2")] then
		self.platypus.abort_jump(0.5)
				
	end
	
	if self.actions[hash("up2")] and self.ladder then
		climb_up(self)
	elseif self.actions[hash("down2")] and self.ladder and not ground_contact then
		climb_down(self)
	end

	--отскок в сторону
	if self.actions[hash("rebound")]and cooldown_rebound then
		cooldown_rebound = false
		local pos = go.get_position()
		go.animate(go.get_id(), "position.x", go.PLAYBACK_ONCE_FORWARD, pos.x - 60, go.EASING_LINEAR, 0.2, 0)
		timer.delay(2, false, function()
			cooldown_rebound = true
		end)
	end
	
end

function on_message(self, message_id, message, sender)
	self.platypus.on_message(message_id, message)

	if message_id == hash("trigger_response") then

		--контакт с лестницей
		if message.other_group == hash("ladder") then
			if message.enter then
				self.ladder = true
			else
				self.platypus.gravity = -500
				self.ladder = false
			end
		end
	end
end

function on_input(self, action_id, action)
	if action_id then
		if action.pressed then
			self.actions[action_id] = true
		elseif action.released then
			self.actions[action_id] = false
		end
	end

	if action_id == hash("shot") and action.released then
		play_animation(self, hash("attack"), function()
			local id = factory.create("shot#shot")
			msg.post(id, "shot_in_enemy", {right = right})
		end)
	end
end
