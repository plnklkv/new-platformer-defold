go.property("health", 60)
go.property("max_health", 60)
go.property("damage_enemy", 20)
go.property("speed", 50)

local GROUP_player = hash("player")
local GROUP_obstacle_for_enemy = hash("obstacle_for_enemy")

local platypus = require "platypus.platypus"

function init(self)
	self.input_state = {}
	self.platypus = platypus.create({
		collisions = {
			separation = platypus.SEPARATION_RAYS,
			groups = {
				[hash("platform")] = platypus.DIR_ALL,
				[hash("obstacle_for_enemy")] = platypus.DIR_ALL,

			},
			left = 9, right = 9, top = 14, bottom = 14, offset = vmath.vector3(0, -3, 0)
		},
		debug = true,
		gravity = -500,
		allow_double_jump = true,

		allow_wall_jump = true,
		allow_wall_slide = true,
		wall_slide_gravity = -50,
	})

	
	self.obstacle_for_enemy_CONTACT = false

	--self.speed = 50
	--self.enemy_health = 50
	self.pos = vmath.vector3(0, 0, 0)

	--для остановки перед игроком
	self.player_attack = false

	self.msg_shot_attack = hash("shot_attack")
	self.msg_simple_attack = hash("simple_attack")	

	msg.post("main:/difficulty#difficulty", "enemy_sender")
end

--атака на игрока
function decrease_player_health(self, player)
	if player == hash("/player") then
		msg.post("player#player", "simple_attack")
	elseif player == hash("/player2") then
			msg.post("player2#player2", "simple_attack")
	end
	--print(self.damage_enemy)
end

--уменьшение здоровья врага
function decrease_enemy_health(self, damage)

	self.health = self.health - damage

	--смерть и лут
	if self.health <= 0 then
		go.delete()
		msg.post("loot#loot", "create_loot", {pos_loot = self.pos})

		--сообщ игроку что враг мёртв
		msg.post("player#player", "enemy_death", {score = 100})
	else
		--шкала здоровья
		self.scale = go.get("#lifebar_background", "scale")
		--если достигнут макс уровень
		if self.health > self.max_health then
			self.scale.x = self.max_health
		else
			self.scale.x = (self.health/self.max_health) + 0.001
		end

		go.set("#lifebar_progress", "scale", self.scale)
	end
end

function update(self, dt)
	self.platypus.update(dt)
	
	if not self.player_attack then
		--self.platypus.update(dt)
		self.pos = go.get_position()

		--типа движение врага
		self.platypus.left(self.speed)
		--self.pos.x = self.pos.x + self.speed * dt
		--go.set_position(self.pos)
	end

	self.player_attack = false
end

function on_message(self, message_id, message, sender)
	self.platypus.on_message(message_id, message)
	
	--сложность
	if message_id == hash("attack_enemy") then
		self.damage_enemy = self.damage_enemy*message.attack_diff
	end
	
	--столкновение врага с препятсвием
	if message.group == GROUP_obstacle_for_enemy then
		if self.obstacle_for_enemy_CONTACT then
			self.obstacle_for_enemy_CONTACT = false
			self.speed = -self.speed
		else
			self.obstacle_for_enemy_CONTACT = true
		end
	end

	if message.group == GROUP_player then
		--остановка перед атакой перед игроком
		self.player_attack = true
		decrease_player_health(self, message.other_id)
		print(message.other_id)
	end

	--атака от игрока
	if message_id == self.msg_simple_attack then
		decrease_enemy_health(self, message.damage_player)
	end

	--выстрел от игрока
	if message_id == self.msg_shot_attack then
		decrease_enemy_health(self, go.get("player2#player2", "shot_player"))
	end

	if message_id == hash("scill2_attack") then
		print("DAMAGE = ", message.damage)
		self.speed = self.speed / message.speed

		decrease_enemy_health(self, message.damage)
	end
end